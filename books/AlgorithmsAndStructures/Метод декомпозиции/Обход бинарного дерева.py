"""
Бинарное дерево T - это конечное множество
узлов, которое либо пустое, либо состоит из корня и
двух непересекающихся бинарных деревьев T_Left и T_Right

Наиболее важные алгоритмы бинарных деревьев - это обходы
- в прямом порядке (preorder traversal):
сначала корень дерева, затем левое и правое поддеревья
- в симметричном порядке (inorder traversal):
сначала левое поддерево, потом корень, потом правое
- в обратном порядке (postorder traversal):
сначала левое поддерево, потом правое, потом корень



Высота бинарного дерева - самый длинный путь от корня к листу
Height:
максимальное значение высоты между T_Left и T_right
и прибавление к нему 1 (чтобы учесть дополнительный уровень корень)
"""

class Tree:
    def __init__(self, value, left=None, right=None ):
        self.data = value
        self.left = left
        self.right = right


tree_object = Tree(1)
tree_object.left = Tree(2.1)
tree_object.right = Tree(2.2)
tree_object.right.left = Tree(3)
      #           1
      #        /     \
      #       /       \
      #     2.1       2.2
      #    /   \     /   \
      # None   None 3    None

def height(Tree):
    if Tree == None:
        return -1
    else:
        return max(height(Tree.left), height(Tree.right)) + 1

print(height(tree_object))

# Сложность задачи определяется количеством узлов n бинарного дерева
# Количество сравнений (для максимума) и количество сложений одинаковы
#
# T(n) = T(Tree.left.n) + T(Tree.right.n) + 1
#
# ***Замечание: в данном алгоритме чаще всего выполняется
# операция сравнения дерева с пустым (с None)
#
# ***Замечание: расширение дерева - это исходное дерево,
# в котором все пустые поддеревья заменены на специальные
# узлы. Такие дополнительно внесенные узлы называются
# *внешними (external)*, а исходные узлы - *внутренними (internal)*
#
# Таким образом, для операция сложения и выбор max производится
# для каждого внутреннего узла,
# а операция сравнения с пустым деревом
# производится для каждого внутреннего и внешнего узла
#
# ***Замечание: количество внешних узлов всегда больше
# внутренних на единицу (x = n+1)
